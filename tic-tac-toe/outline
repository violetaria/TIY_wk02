1. Describe Interfaces and functionality for each interface
2. Pick an interface
    2.a write unit tests
    2.b make tests pass / write code
3. repeat 2 until no more interfaces
4....profit?

Deliverables

In your labs repo ...

a tic-tac-toe.rb script
any other files required by that script
a tests.rb file containing tests for your classes
Requirements

Running ./tic-tac-toe.rb should play a game of tic-tac-toe in the terminal.
Normal Mode

A swappable Player class, which can be Human (gets input from the command line) or Computer. It should be possible to run a game with anywhere from 0 to 2 human players. The computer player does not need to choose moves intelligently.

An option to play again after the game is over.

At least 2 tests for each class. Private methods don't need to be tested!

Hard Mode

Choose any of:

More testing! Any publicly exposed method should have at least 1 test! Again, screw testing private methods. The whole point is that we can change them at will.

Add a Win-Loss-Draw scoreboard that displays after each game.

Make the game support arbitrary (NxN) board sizes > 3. Maybe try starting with only odd-numbered board sizes to make diagonal wins easier.

Make the computer player never lose, only draw.

Notes

Think about your previous solution. Is it reusable, or is it better to start from scratch?
Were there things you could have done then to make it easier to adapt now?
Are there things you can do now which might make it easier to adapt this code in the future?


##### Interfaces ######
### Player
 * initialize (name or "Unimatrix Zero")

## HumanPlayer < Player
 * get_move - get input from player, some way to validate? not sure where validate should be...
 - players should not really know what's valid, honestly the game or board should know that right?
 * get_name

## RandomPlayer < Player
 * get_move - pick random move

### Game
 * initialize (board,player1, player2)
 * play
 * take_turn
 * gave_over?
 * reset_game
 * display_scoreboard

### ScoreBoard
 * initialize()
 * update!
 * get_score
 * display



### Board
 * initialize(?)
 * build_board(n)

 * display
 * update!
 * move_valid?
 * win? <-- not sure if this should be in board or game
 * draw? <-- not sure if this should be in board or game